{"ast":null,"code":"import _asyncToGenerator from \"/Users/tonyroot/Documents/iWork/Battleship/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// Firebase\nimport { collection, getDocs } from 'firebase/firestore';\nimport { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./database.service\";\nexport class HistoryService {\n  constructor(databaseService) {\n    this.databaseService = databaseService;\n\n    if (!this.m_history_snapshot) {\n      this.m_array_history = new Array();\n      this.m_history_b_subject = new BehaviorSubject(this.m_array_history);\n      this.m_history_snapshot = this.create_snapshot(this.databaseService.m_data_base.collection(this.databaseService.m_collections.users), this.snap_callback.bind(this));\n    }\n  }\n\n  snap_callback(in_data, type, modified) {\n    const tmp_pcat = Object.assign({\n      id: in_data.id\n    }, in_data.data());\n    if (type === 'added') this.m_array_history.push(tmp_pcat);\n\n    if (type === 'modified') {\n      const index = this.m_array_history.findIndex(it => it.id === tmp_pcat.id);\n\n      if (index < 0) {\n        return;\n      }\n\n      this.m_array_history[index] = tmp_pcat;\n    }\n\n    if (type === 'removed' || type === 'deleted') {\n      const index = this.m_array_history.findIndex(it => it.id === tmp_pcat.id);\n\n      if (index < 0) {\n        return;\n      }\n\n      this.m_array_history.splice(index, 1);\n      console.log(this.m_array_history);\n    }\n\n    this.m_history_b_subject.next(this.m_array_history);\n  }\n\n  create_snapshot(coll_ref, callback, includeMetadata = true) {\n    if (!coll_ref) return null;\n    return coll_ref.onSnapshot({\n      includeMetadataChanges: includeMetadata\n    }, snapshot => {\n      const modification_from = snapshot.metadata.hasPendingWrites ? 'LOCAL' : 'SERVER';\n      if (!snapshot.empty) snapshot.docChanges().forEach(doc_data => {\n        callback(doc_data.doc, doc_data.type, modification_from);\n      });else {\n        const data = {};\n        data.id = 0;\n\n        data.data = () => {};\n\n        callback(data, '', modification_from);\n      }\n    });\n  }\n\n  get_firestore_history() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const m_history_snapshot = yield getDocs(collection(_this.databaseService.m_data_base, _this.databaseService.m_collections.history));\n      m_history_snapshot.forEach(doc => {\n        console.log(doc.id, \" => \", doc.data());\n      });\n    })();\n  }\n\n}\n\nHistoryService.ɵfac = function HistoryService_Factory(t) {\n  return new (t || HistoryService)(i0.ɵɵinject(i1.DatabaseService));\n};\n\nHistoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HistoryService,\n  factory: HistoryService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/tonyroot/Documents/iWork/Battleship/src/app/services/history.service.ts"],"names":["collection","getDocs","BehaviorSubject","i0","i1","HistoryService","constructor","databaseService","m_history_snapshot","m_array_history","Array","m_history_b_subject","create_snapshot","m_data_base","m_collections","users","snap_callback","bind","in_data","type","modified","tmp_pcat","Object","assign","id","data","push","index","findIndex","it","splice","console","log","next","coll_ref","callback","includeMetadata","onSnapshot","includeMetadataChanges","snapshot","modification_from","metadata","hasPendingWrites","empty","docChanges","forEach","doc_data","doc","get_firestore_history","history","ɵfac","HistoryService_Factory","t","ɵɵinject","DatabaseService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["// Firebase\nimport { collection, getDocs } from 'firebase/firestore';\nimport { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./database.service\";\nexport class HistoryService {\n    constructor(databaseService) {\n        this.databaseService = databaseService;\n        if (!this.m_history_snapshot) {\n            this.m_array_history = new Array();\n            this.m_history_b_subject = new BehaviorSubject(this.m_array_history);\n            this.m_history_snapshot = this.create_snapshot(this.databaseService.m_data_base.collection(this.databaseService.m_collections.users), this.snap_callback.bind(this));\n        }\n    }\n    snap_callback(in_data, type, modified) {\n        const tmp_pcat = Object.assign({ id: in_data.id }, in_data.data());\n        if (type === 'added')\n            this.m_array_history.push(tmp_pcat);\n        if (type === 'modified') {\n            const index = this.m_array_history.findIndex(it => it.id === tmp_pcat.id);\n            if (index < 0) {\n                return;\n            }\n            this.m_array_history[index] = tmp_pcat;\n        }\n        if (type === 'removed' || type === 'deleted') {\n            const index = this.m_array_history.findIndex(it => it.id === tmp_pcat.id);\n            if (index < 0) {\n                return;\n            }\n            this.m_array_history.splice(index, 1);\n            console.log(this.m_array_history);\n        }\n        this.m_history_b_subject.next(this.m_array_history);\n    }\n    create_snapshot(coll_ref, callback, includeMetadata = true) {\n        if (!coll_ref)\n            return null;\n        return coll_ref.onSnapshot({ includeMetadataChanges: includeMetadata }, (snapshot) => {\n            const modification_from = snapshot.metadata.hasPendingWrites ? 'LOCAL' : 'SERVER';\n            if (!snapshot.empty)\n                snapshot.docChanges().forEach((doc_data) => {\n                    callback(doc_data.doc, doc_data.type, modification_from);\n                });\n            else {\n                const data = {};\n                data.id = 0;\n                data.data = () => { };\n                callback(data, '', modification_from);\n            }\n        });\n    }\n    async get_firestore_history() {\n        const m_history_snapshot = await getDocs(collection(this.databaseService.m_data_base, this.databaseService.m_collections.history));\n        m_history_snapshot.forEach((doc) => {\n            console.log(doc.id, \" => \", doc.data());\n        });\n    }\n}\nHistoryService.ɵfac = function HistoryService_Factory(t) { return new (t || HistoryService)(i0.ɵɵinject(i1.DatabaseService)); };\nHistoryService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: HistoryService, factory: HistoryService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}