{"ast":null,"code":"import _asyncToGenerator from \"/Users/tonyroot/Documents/iWork/Battleship/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// Firebase\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/storage';\nimport { getAuth, GoogleAuthProvider, onAuthStateChanged, signInWithPopup } from 'firebase/auth'; // Classes\n\nimport { User } from '../classes/user';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./database.service\";\nimport * as i2 from \"./user.service\";\nimport * as i3 from \"@angular/router\";\nexport class AuthenticationService {\n  constructor(databaseService, userService, router) {\n    this.databaseService = databaseService;\n    this.userService = userService;\n    this.router = router;\n    this.init_authentication();\n  }\n\n  init_authentication() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.get_database_on_auth(user => {\n        if (user) {\n          _this.m_uid = user.uid;\n          _this.m_user_snapshot = _this.databaseService.m_data_base.collection(_this.databaseService.m_collections.users).doc(user.uid).get().then(r_user => {\n            _this.m_user = r_user;\n\n            _this.m_user_b_subject.next(_this.m_user);\n\n            if (!_this.m_user) console.log(\"unauthorized\");\n          });\n        } else {\n          _this.router.navigate(['game/home']);\n        }\n      });\n    })();\n  }\n\n  init_authentication() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.get_database_on_auth(user => {\n        if (user) {\n          _this2.m_uid = user.uid;\n          _this2.userService.m_uid = user.uid;\n          _this2.m_user = user;\n\n          _this2.m_user_b_subject.next(_this2.m_user);\n\n          let m_user_snapshot = _this2.userService.get_firestore_user(_this2.m_uid);\n\n          if (!!m_user_snapshot) {\n            _this2.userService.m_user = new User(user.providerData[0].displayName, user.providerData[0].email, user.providerData[0].photoURL, user.providerData[0].providerId);\n\n            _this2.userService.save_firestore_user(_this2.userService.m_user, _this2.m_uid);\n\n            _this2.m_user_b_subject.next(_this2.m_user);\n          }\n        } else {\n          _this2.router.navigate(['game/home']);\n        }\n      });\n    })();\n  }\n\n  get_database_on_auth(m_function) {\n    const auth = getAuth();\n    return onAuthStateChanged(auth, m_function);\n  }\n\n  get_database_auth() {\n    this.databaseService.database_init();\n    return firebase.auth();\n  }\n\n  sign_in_google() {\n    const auth = getAuth();\n    const provider = new GoogleAuthProvider();\n    signInWithPopup(auth, provider).then(result => {\n      this.router.navigate(['game/home']);\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  logout() {\n    this.router.navigate(['authentication/log-in']);\n    return this.get_database_auth().signOut();\n  }\n\n}\n\nAuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n  return new (t || AuthenticationService)(i0.ɵɵinject(i1.DatabaseService), i0.ɵɵinject(i2.UserService), i0.ɵɵinject(i3.Router));\n};\n\nAuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticationService,\n  factory: AuthenticationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/tonyroot/Documents/iWork/Battleship/src/app/services/authentication.service.ts"],"names":["firebase","getAuth","GoogleAuthProvider","onAuthStateChanged","signInWithPopup","User","i0","i1","i2","i3","AuthenticationService","constructor","databaseService","userService","router","init_authentication","get_database_on_auth","user","m_uid","uid","m_user_snapshot","m_data_base","collection","m_collections","users","doc","get","then","r_user","m_user","m_user_b_subject","next","console","log","navigate","get_firestore_user","providerData","displayName","email","photoURL","providerId","save_firestore_user","m_function","auth","get_database_auth","database_init","sign_in_google","provider","result","catch","error","logout","signOut","ɵfac","AuthenticationService_Factory","t","ɵɵinject","DatabaseService","UserService","Router","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["// Firebase\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/storage';\nimport { getAuth, GoogleAuthProvider, onAuthStateChanged, signInWithPopup } from 'firebase/auth';\n// Classes\nimport { User } from '../classes/user';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./database.service\";\nimport * as i2 from \"./user.service\";\nimport * as i3 from \"@angular/router\";\nexport class AuthenticationService {\n    constructor(databaseService, userService, router) {\n        this.databaseService = databaseService;\n        this.userService = userService;\n        this.router = router;\n        this.init_authentication();\n    }\n    async init_authentication() {\n        this.get_database_on_auth(user => {\n            if (user) {\n                this.m_uid = user.uid;\n                this.m_user_snapshot = this.databaseService.m_data_base\n                    .collection(this.databaseService.m_collections.users).doc(user.uid).get()\n                    .then((r_user) => {\n                    this.m_user = r_user;\n                    this.m_user_b_subject.next(this.m_user);\n                    if (!this.m_user)\n                        console.log(\"unauthorized\");\n                });\n            }\n            else {\n                this.router.navigate(['game/home']);\n            }\n        });\n    }\n    async init_authentication() {\n        this.get_database_on_auth((user) => {\n            if (user) {\n                this.m_uid = user.uid;\n                this.userService.m_uid = user.uid;\n                this.m_user = user;\n                this.m_user_b_subject.next(this.m_user);\n                let m_user_snapshot = this.userService.get_firestore_user(this.m_uid);\n                if (!!m_user_snapshot) {\n                    this.userService.m_user = new User(user.providerData[0].displayName, user.providerData[0].email, user.providerData[0].photoURL, user.providerData[0].providerId);\n                    this.userService.save_firestore_user(this.userService.m_user, this.m_uid);\n                    this.m_user_b_subject.next(this.m_user);\n                }\n            }\n            else {\n                this.router.navigate(['game/home']);\n            }\n        });\n    }\n    get_database_on_auth(m_function) {\n        const auth = getAuth();\n        return onAuthStateChanged(auth, m_function);\n    }\n    get_database_auth() {\n        this.databaseService.database_init();\n        return firebase.auth();\n    }\n    sign_in_google() {\n        const auth = getAuth();\n        const provider = new GoogleAuthProvider();\n        signInWithPopup(auth, provider).then(result => {\n            this.router.navigate(['game/home']);\n        }).catch((error) => {\n            console.log(error);\n        });\n    }\n    logout() {\n        this.router.navigate(['authentication/log-in']);\n        return this.get_database_auth().signOut();\n    }\n}\nAuthenticationService.ɵfac = function AuthenticationService_Factory(t) { return new (t || AuthenticationService)(i0.ɵɵinject(i1.DatabaseService), i0.ɵɵinject(i2.UserService), i0.ɵɵinject(i3.Router)); };\nAuthenticationService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthenticationService, factory: AuthenticationService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}