{"ast":null,"code":"import _asyncToGenerator from \"/Users/tonyroot/Documents/iWork/Battleship/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// Firebase\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/storage';\nimport { getAuth, GoogleAuthProvider, onAuthStateChanged, signInWithPopup } from 'firebase/auth'; // Classes\n\nimport { User } from '../classes/user';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./database.service\";\nimport * as i2 from \"./user.service\";\nimport * as i3 from \"@angular/router\";\nexport class AuthenticationService {\n  constructor(databaseService, userService, router) {\n    this.databaseService = databaseService;\n    this.userService = userService;\n    this.router = router;\n    this.init_authentication();\n  }\n\n  init_authentication() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.get_database_on_auth(user => {\n        if (user) {\n          _this.m_uid = user.uid;\n          _this.userService.m_uid = user.uid;\n\n          let m_user_snapshot = _this.userService.get_firestore_user(_this.m_uid);\n\n          if (!!m_user_snapshot) {\n            _this.userService.m_user = new User(user.providerData[0].displayName, user.providerData[0].email, user.providerData[0].photoURL, user.providerData[0].providerId);\n\n            _this.userService.save_firestore_user(_this.userService.m_user, _this.m_uid);\n          }\n        } else {\n          _this.router.navigate(['game/home']);\n        }\n      });\n    })();\n  }\n\n  get_database_on_auth(m_function) {\n    const auth = getAuth();\n    return onAuthStateChanged(auth, m_function);\n  }\n\n  get_database_auth() {\n    this.databaseService.database_init();\n    return firebase.auth();\n  }\n\n  sign_in_google() {\n    const auth = getAuth();\n    const provider = new GoogleAuthProvider();\n    signInWithPopup(auth, provider).then(result => {\n      this.router.navigate(['game/home']);\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  logout() {\n    this.router.navigate(['authentication/log-in']);\n    this.userService.m_user = undefined;\n    return this.get_database_auth().signOut();\n  }\n\n}\n\nAuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n  return new (t || AuthenticationService)(i0.ɵɵinject(i1.DatabaseService), i0.ɵɵinject(i2.UserService), i0.ɵɵinject(i3.Router));\n};\n\nAuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticationService,\n  factory: AuthenticationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/tonyroot/Documents/iWork/Battleship/src/app/services/authentication.service.ts"],"names":["firebase","getAuth","GoogleAuthProvider","onAuthStateChanged","signInWithPopup","User","i0","i1","i2","i3","AuthenticationService","constructor","databaseService","userService","router","init_authentication","get_database_on_auth","user","m_uid","uid","m_user_snapshot","get_firestore_user","m_user","providerData","displayName","email","photoURL","providerId","save_firestore_user","navigate","m_function","auth","get_database_auth","database_init","sign_in_google","provider","then","result","catch","error","console","log","logout","undefined","signOut","ɵfac","AuthenticationService_Factory","t","ɵɵinject","DatabaseService","UserService","Router","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["// Firebase\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/storage';\nimport { getAuth, GoogleAuthProvider, onAuthStateChanged, signInWithPopup } from 'firebase/auth';\n// Classes\nimport { User } from '../classes/user';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./database.service\";\nimport * as i2 from \"./user.service\";\nimport * as i3 from \"@angular/router\";\nexport class AuthenticationService {\n    constructor(databaseService, userService, router) {\n        this.databaseService = databaseService;\n        this.userService = userService;\n        this.router = router;\n        this.init_authentication();\n    }\n    async init_authentication() {\n        this.get_database_on_auth((user) => {\n            if (user) {\n                this.m_uid = user.uid;\n                this.userService.m_uid = user.uid;\n                let m_user_snapshot = this.userService.get_firestore_user(this.m_uid);\n                if (!!m_user_snapshot) {\n                    this.userService.m_user = new User(user.providerData[0].displayName, user.providerData[0].email, user.providerData[0].photoURL, user.providerData[0].providerId);\n                    this.userService.save_firestore_user(this.userService.m_user, this.m_uid);\n                }\n            }\n            else {\n                this.router.navigate(['game/home']);\n            }\n        });\n    }\n    get_database_on_auth(m_function) {\n        const auth = getAuth();\n        return onAuthStateChanged(auth, m_function);\n    }\n    get_database_auth() {\n        this.databaseService.database_init();\n        return firebase.auth();\n    }\n    sign_in_google() {\n        const auth = getAuth();\n        const provider = new GoogleAuthProvider();\n        signInWithPopup(auth, provider).then(result => {\n            this.router.navigate(['game/home']);\n        }).catch((error) => {\n            console.log(error);\n        });\n    }\n    logout() {\n        this.router.navigate(['authentication/log-in']);\n        this.userService.m_user = undefined;\n        return this.get_database_auth().signOut();\n    }\n}\nAuthenticationService.ɵfac = function AuthenticationService_Factory(t) { return new (t || AuthenticationService)(i0.ɵɵinject(i1.DatabaseService), i0.ɵɵinject(i2.UserService), i0.ɵɵinject(i3.Router)); };\nAuthenticationService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthenticationService, factory: AuthenticationService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}